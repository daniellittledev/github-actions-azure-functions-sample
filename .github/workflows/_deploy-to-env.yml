name: Reusable - Deploy App

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment to deploy to (test/prod)"
      version:
        required: true
        type: string
        description: "Version number for deployment"
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_RESOURCE_GROUP:
        required: true
      AZURE_FUNCTIONAPP_NAME:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: windows-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create artifacts directory
          New-Item -ItemType Directory -Path "./artifacts" -Force | Out-Null

          # Download function app asset using gh cli
          Write-Host "Downloading function app asset from release ${{ inputs.version }}..."
          gh release download ${{ inputs.version }} --pattern "function-app-*" --dir "./artifacts"

          # Rename the downloaded file to a consistent name
          $functionAppFile = Get-ChildItem "./artifacts/function-app-*.zip" | Select-Object -First 1
          if ($functionAppFile) {
            Rename-Item $functionAppFile.FullName -NewName "function-app.zip"
            Write-Host "Function app asset downloaded and renamed to function-app.zip"
          } else {
            Write-Host "Function app asset not found in release"
            exit 1
          }

          Write-Host "Infrastructure changed, downloading bicep templates..."
          New-Item -ItemType Directory -Path "./bicep-artifacts" -Force | Out-Null

          try {
            Write-Host "Downloading bicep templates asset from release ${{ inputs.version }}..."
            gh release download ${{ inputs.version }} --pattern "bicep-templates-*" --dir "./bicep-artifacts"
            
            # Extract bicep templates
            $bicepFile = Get-ChildItem "./bicep-artifacts/bicep-templates-*" | Select-Object -First 1
            if ($bicepFile) {
              Write-Host "Extracting Bicep templates"
              Expand-Archive -Path $bicepFile.FullName -DestinationPath "./bicep-artifacts/" -Force
              Remove-Item $bicepFile.FullName -Force
              Write-Host "Bicep templates downloaded and extracted successfully"
            }
          } catch {
            Write-Host "Warning: Bicep templates asset not found in release"
            Write-Host "Error: $($_.Exception.Message)"
          }

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Bicep Infrastructure
        shell: pwsh
        run: |
          # Check if bicep templates were successfully downloaded
          if (Test-Path "./bicep-artifacts/main.bicep") {
            Write-Host "Bicep templates found, deploying infrastructure..."
            Write-Host "Deploying Bicep template: main.bicep"
            az deployment group create `
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} `
              --template-file ./bicep-artifacts/main.bicep `
              --parameters functionAppName=${{ secrets.AZURE_FUNCTIONAPP_NAME }} `
              --mode Incremental

            Write-Host "Bicep infrastructure deployment completed"
          } else {
            Write-Host "No bicep templates found in release, skipping infrastructure deployment"
          }

      - name: Get Storage Connection String
        id: get-storage
        shell: pwsh
        run: |
          Write-Host "Retrieving storage connection string from existing storage account..."

          # Get the storage account name from function app name
          $functionAppName = "${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
          $storageAccountName = "${$functionAppName -replace '-', ''}st"

          # Get storage account key
          $storageKey = az storage account keys list `
            --account-name $storageAccountName `
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} `
            --query "[0].value" `
            --output tsv

          if ($storageKey) {
            # Construct the connection string
            $storageConnection = "DefaultEndpointsProtocol=https;AccountName=$storageAccountName;AccountKey=$storageKey;EndpointSuffix=core.windows.net"
            echo "STORAGE_CONNECTION=$storageConnection" >> $env:GITHUB_OUTPUT
            Write-Host "Storage connection string retrieved from existing storage account"
          } else {
            Write-Host "Failed to retrieve storage account key"
            exit 1
          }

      - name: Create staging slot
        shell: pwsh
        run: |
          # Check if staging slot exists, create if not
          $slots = az functionapp deployment slot list `
            --name ${{ secrets.AZURE_FUNCTIONAPP_NAME }} `
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} `
            --query "[?name=='staging']" `
            --output tsv

          if (-not $slots) {
            Write-Host "Creating staging slot..."
            az functionapp deployment slot create `
              --name ${{ secrets.AZURE_FUNCTIONAPP_NAME }} `
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} `
              --slot staging
          } else {
            Write-Host "Staging slot already exists"
          }

      - name: Deploy to staging slot
        shell: pwsh
        run: |
          az functionapp deployment source config-zip `
            --name ${{ secrets.AZURE_FUNCTIONAPP_NAME }} `
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} `
            --slot staging `
            --src ./artifacts/function-app.zip

      - name: Configure app settings for staging slot
        shell: pwsh
        run: |
          # Set environment-specific app settings
          $environment = "${{ inputs.environment }}"
          $dotnetEnv = if ($environment -eq "prod") { "Production" } else { "Development" }
          $deployedAt = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")

          # Get storage connection string from get-storage step
          $storageConnection = "${{ steps.get-storage.outputs.STORAGE_CONNECTION }}"
          if ($storageConnection -eq "") {
            Write-Host "No storage connection string available"
            exit 1
          }

          Write-Host "Configuring app settings for staging slot..."
          az functionapp config appsettings set `
            --name ${{ secrets.AZURE_FUNCTIONAPP_NAME }} `
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} `
            --slot staging `
            --settings `
              "FUNCTIONS_EXTENSION_VERSION=~4" `
              "FUNCTIONS_WORKER_RUNTIME=dotnet-isolated" `
              "WEBSITE_RUN_FROM_PACKAGE=1" `
              "AzureWebJobsStorage=$storageConnection" `
              "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              "DOTNET_ENVIRONMENT=$dotnetEnv" `
              "SAMPLE_SETTING=$environment-sample" `
              "DEPLOYMENT_VERSION=${{ inputs.version }}" `
              "DEPLOYED_AT=$deployedAt"

      - name: Wait for staging slot warmup
        shell: pwsh
        run: |
          Write-Host "Waiting for staging slot to warm up..."
          Start-Sleep -Seconds 30

          # Health check on staging slot
          $stagingUrl = "https://${{ secrets.AZURE_FUNCTIONAPP_NAME }}-staging.azurewebsites.net"

          # Try to hit the health endpoint (assuming you have one)
          for ($i = 1; $i -le 10; $i++) {
            try {
              $response = Invoke-WebRequest -Uri "$stagingUrl/api/health" -TimeoutSec 10 -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                Write-Host "Staging slot is healthy"
                break
              }
            } catch {
              Write-Host "Attempt $i`: Staging slot not ready yet, waiting..."
              Start-Sleep -Seconds 10
            }
          }

      - name: Run smoke tests on staging
        shell: pwsh
        run: |
          # Add your smoke tests here
          Write-Host "Running smoke tests on staging slot..."
          $stagingUrl = "https://${{ secrets.AZURE_FUNCTIONAPP_NAME }}-staging.azurewebsites.net"

          # Example smoke test
          try {
            $response = Invoke-WebRequest -Uri "$stagingUrl/api/health" -TimeoutSec 30 -ErrorAction Stop
            if ($response.Content -match "Healthy") {
              Write-Host "Smoke test passed: Health endpoint is working"
            } else {
              Write-Host "Smoke test failed: Health endpoint response unexpected"
              exit 1
            }
          } catch {
            Write-Host "Smoke test failed: Health endpoint is not working"
            Write-Host "Error: $($_.Exception.Message)"
            exit 1
          }

      - name: Swap staging to production
        shell: pwsh
        run: |
          Write-Host "Swapping staging slot to production..."
          az functionapp deployment slot swap `
            --name ${{ secrets.AZURE_FUNCTIONAPP_NAME }} `
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} `
            --slot staging `
            --target-slot production

      - name: Verify production deployment
        shell: pwsh
        run: |
          Write-Host "Verifying production deployment..."
          $prodUrl = "https://${{ secrets.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"

          # Wait a bit for the swap to complete
          Start-Sleep -Seconds 15

          # Verify production is working
          for ($i = 1; $i -le 5; $i++) {
            try {
              $response = Invoke-WebRequest -Uri "$prodUrl/api/health" -TimeoutSec 10 -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                Write-Host "✅ Production verification successful"
                break
              }
            } catch {
              Write-Host "Attempt $i`: Production not ready yet, waiting..."
              Start-Sleep -Seconds 10
            }
          }

      - name: Clean up on failure
        if: failure()
        shell: pwsh
        run: |
          Write-Host "Deployment failed, cleaning up..."
          # If deployment failed, you might want to swap back or take other corrective actions
          # This is optional and depends on your rollback strategy
